// 1.Решите задачу по выводу данных в консоль.

console.log('Record 1');

setTimeout(() => {
    console.log('Record 2');
    Promise.resolve().then(() => {
        setTimeout(() => {
            console.log('Record 3');
            Promise.resolve().then(() => {
                console.log('Record 4');
            });
        });
    });
});

console.log('Record 5');

Promise.resolve().then(() => Promise.resolve().then(() => console.log('Record 6')));

/**
 * Сначала выполнятся синхронные выводы в порядке их следования по коду.
 * 1) Record 1 - синхронная операция
 * - callback функция функции setTimeout сразу же отложится до конца выполнения скрипта.
 *   (т.к. время не указано) и потом запустится.
 * 2) Record 5 - синхронная операция
 * - промис из 19 строки разрезолвится и cb из then провалится в очередь микротасков.
 * - т.к. очередь микротасков не пуста - выполнится cb и разрезолвится внутреений промис и
 *   cb отправится в очередь микротасков.
 * - т.к. очередь микротасков не пуста - выполнится cb.
 * 3) Record 6 - синхронная операция коллбэка вложенного промиса.
 * - очереди пусты и фаза Poll перейдет к фазе Timers, там уже запланирован вызов коллбэка
 *   функции setTimeout.
 * 4) Record 2 - синхронная операция в cb setTimeout.
 * - промис из 7 строки разрезолвится и cb из then провалится в очередь микротасков.
 * - больше коллбэке ничего нет.
 * - выполнится cb из очереди микротасков.
 * - callback функция функции setTimeout сразу же отложится до конца выполнения скрипта.
 * - больше нечего выполнять - движок перейдет к проверке очереди цикла событий.
 * - выполнит отложенный коллбэк
 * 5) Record 3 - синхронная операция в коллбэке
 * - промис из 10 строки разрезолвится и cb из then провалится в очередь микротасков.
 * - больше выполнять нечего, появляется окно для выполнения микротасков.
 * 6) Record 4 - выполнится последний выззов из коллбэка промиса.
 */

